###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html
#
# If the application you are testing is available as a docker container and you want to test
# multiple versions see the following for an example:
# https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows
name: Ansible integration tests
on:
  # Run CI against all pushes to main branch (direct commits, also merged PRs)
  push:
    branches: [master]
  # And for Pull Requests on main branch if a related path is updated
  pull_request:
    branches: [master]
    paths:
      - plugins/**
      - tests/mocks/**
      - tests/integration/**
      - .github/workflows/ansible-integration.yml
  # Run once a month (at 10:00 UTC the 26th)
  # This ensures that even if there haven't been commits that we are still testing against latest version of ansible-test for each ansible-core version
  schedule:
    - cron: '0 10 26 * *'
env:
  # Collection params
  C_NAMESPACE: yoanm
  C_NAME: utils
  # Cache params
  CACHE_VERSION: 2022031305 # To be able to create a new cache (YYYYMMDDXX)
  # Makefile options
  BUILD_DIR: '/tmp/build'
  WITH_COVERAGE: 1
  WITH_DOCKER: 1
  WITH_COVERAGE_REPORT: xml

concurrency:
  group: ansible-integration-tests-${{ github.ref || github.head_ref }}
  cancel-in-progress: ${{ github.ref != 'master' }}
jobs:
  integration:
    name: Integration ${{ matrix.ansible }}+py${{ matrix.python }}
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      WITH_PY_TARGET: ${{ matrix.python }}
    strategy:
      max-parallel: 4
      fail-fast: ${{ github.ref != 'master' }}
      matrix:
        include:
          ## 2.11.0+ (requires python 2.7+) => python 2.7, 3.5 and 3.9 (latest, due to ansible-test requirements)
          - ansible: stable-2.11
            python: '2.7'
          - ansible: stable-2.11
            python: '3.5'
          - ansible: stable-2.11
            python: '3.9'
          ## 2.12.0+ (requires python 3.8+) => python 3.8 and 3.10 (latest)
          - ansible: stable-2.12
            python: '3.8'
          - ansible: stable-2.12
            python: '3.10'
          ## 2.13.0+ (requires python 3.8+) => python 3.8 and 3.10 (latest)
          - ansible: stable-2.13
            python: '3.8'
          - ansible: stable-2.13
            python: '3.10'
          ## devel (requires python 3.9+) => python 3.9, 3.10 (latest) and 3.11 (devel)
          - ansible: devel
            python: '3.9'
          - ansible: devel
            python: '3.10'
          - ansible: devel
            python: '3.11'

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
#          python-version: 3.8

      - name: Install ansible (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Docker cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: ${{env.CACHE_VERSION}}-integration-tests-docker-cache-ansible-${{ github.base_ref || github.ref }}-${{ matrix.ansible }}-${{ matrix.python }}-{hash}
          restore-keys: ${{env.CACHE_VERSION}}-integration-tests-docker-cache-ansible-${{ github.base_ref || github.ref }}-${{ matrix.ansible }}-${{ matrix.python }}-

      # Avoid using galaxy usage if deps are already downloaded one time
      - name: Cache Build directory
        # Deactivate cache for 2.9 and 2.10 as there is no upgrade mechanism (--upgrade) !
        if: ${{ matrix.ansible != 'stable-2.9' && matrix.ansible != 'stable-2.10' }}
        uses: actions/cache@v2
        with:
          path: ${{env.BUILD_DIR}}
          key: ${{env.CACHE_VERSION}}-integration-tests-build_dir-cache-ansible-${{ github.base_ref || github.ref }}-${{ matrix.ansible }}

      - name: Configure test environment
        run: make configure-test-env mode="integration" && make build-for-test

      # ansible-test support producing code coverage
      - name: Run integration tests
        run: make test-ansible-integration

      - name: Generate coverage report
        run: make test-ansible-coverage coverage_o="-v --requirements --group-by command --group-by version"

      # See the reports at https://codecov.io/gh/yoanm/ansible-utils-collection
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v2
        with:
          name: "integration-test-${{ matrix.ansible }}"
          flags: "integrationtests,ansible-${{ matrix.ansible }},ansible-${{ matrix.ansible }}-py${{ matrix.python }}"
          fail_ci_if_error: true
          #verbose: true
          root_dir: "${{env.BUILD_DIR}}/ansible_collections/${{env.C_NAMESPACE}}/${{env.C_NAME}}"
          working-directory: "${{env.BUILD_DIR}}/ansible_collections/${{env.C_NAMESPACE}}/${{env.C_NAME}}"

