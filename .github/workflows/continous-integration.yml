name: CI
on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    branches:
      - master
  pull_request:
  # Run CI once a month (at 06:00 UTC the 12th)
  # This ensures that even if there haven't been commits that we are still testing against latest version of ansible-test for each ansible-core version
  schedule:
    - cron: '0 6 12 * *'
env:
  NAMESPACE: yoanm
  COLLECTION_NAME: utils


jobs:
###
# Python tests
#
  python:
    name: Python tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install ansible-core (devel)
        run: pip install https://github.com/ansible/ansible/archive/devel.tar.gz --disable-pip-version-check
      - name: Configure test environment
        run: make configure-test-env
      - name: Execute tests
        run: make test-python
###
# Unit tests (OPTIONAL)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_units.html
#  units:
#    runs-on: ubuntu-latest
#    name: Units (Ⓐ${{ matrix.ansible }})
#    strategy:
#      # As soon as the first unit test fails, cancel the others to free up the CI queue
#      fail-fast: true
#      matrix:
#        ansible:
#          # - stable-2.9 # Only if your collection supports Ansible 2.9
#          - stable-2.10
#          - stable-2.11
#          - stable-2.12
#          - devel

#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      - name: Install ansible-core (${{ matrix.ansible }})
#        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check
#      - name: Configure test environment
#        run: make configure-test-env
#      - name: Build collection for testing
#        run: make build-for-test
#      # Run the unit tests
#      - name: Run unit test
#        run: make test-ansible-units
#      - name: Generate coverage report
#        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
#        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
#      # See the reports at https://codecov.io/gh/yoanm/ansible-utils-collection
#      - uses: codecov/codecov-action@v2
#        with:
#          fail_ci_if_error: false
  sanity:
    needs: [python] # Prevent a bunch of jobs to be triggered if python tests fail
    name: Sanity ${{ matrix.ansible }} branch
    strategy:
      fail-fast: false # Keep running other node from the matrix if one failed (errors may be different from node to node)
      matrix:
        ansible:
          - stable-2.10
          - stable-2.11
          - stable-2.12
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: DEBUG
        run: echo "A:" && (ls -ail ~/.local/share/virtualenvs || true) && echo "B:" && (ls -ail ~/.cache/pip || true) && echo "PIP CACHE DIR $(pip cache dir)" && echo "C:" && (ls -ail $(pip cache dir) || true)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install ansible-core (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: DEBUG
        run: echo "A:" && (ls -ail ~/.local/share/virtualenvs || true) && echo "B:" && (ls -ail ~/.cache/pip || true) && echo "PIP CACHE DIR $(pip cache dir)" && echo "C:" && (ls -ail $(pip cache dir) || true)
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: foo-docker-cache-ansible-${{ matrix.ansible }}-{hash}
          restore-keys: foo-docker-cache-ansible-${{ matrix.ansible }}-
      - name: Configure test environment
        run: make configure-test-env
      - name: Build collection for testing
        run: make build-for-test
        if: ${{ matrix.ansible != 'stable-2.10' }}
      - name: Build collection for testing (ansible-core v2.10)
        # ansible-core v2.10 doesn't support installing fom current directory if it is not under C_NAMESPACE/C_NAME directories
        run: |
          make configure-test-env && \
          make build && \
          ansible-galaxy collection install -p ./build/ansible_collections "$(find . -name "${{env.NAMESPACE}}-${{env.COLLECTION_NAME}}-*.tar.gz")" && \
          cd build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}} && \
          git init -q .
        if: ${{ matrix.ansible == 'stable-2.10' }}
      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color --coverage
        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
      - name: DEBUG
        run: echo "A:" && (ls -ail ~/.local/share/virtualenvs || true) && echo "B:" && (ls -ail ~/.cache/pip || true) && echo "PIP CACHE DIR $(pip cache dir)" && echo "C:" && (ls -ail $(pip cache dir) || true)
      # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
      # See the reports at https://codecov.io/gh/yoanm/ansible-utils-collection
      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false
  sanity-devel:
    needs: [sanity] # Prevent sanity tests on devel branch if they already fail on stable branches
    name: Sanity devel branch
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install ansible-core (devel)
        run: pip install https://github.com/ansible/ansible/archive/devel.tar.gz --disable-pip-version-check
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: foo-docker-cache-ansible-devel-{hash}
          restore-keys: foo-docker-cache-ansible-devel-
      - name: Configure test environment
        run: make configure-test-env
      - name: Build collection for testing
        run: make build-for-test
      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test sanity --docker -v --color --coverage
        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
      # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
      # See the reports at https://codecov.io/gh/yoanm/ansible-utils-collection
      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false
###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html
# If the application you are testing is available as a docker container and you want to test
# multiple versions see the following for an example:
# https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows
#  integration:
#    runs-on: ubuntu-latest
#    name: Integration (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
#    strategy:
#      fail-fast: false
#      matrix:
#        ansible:
#          - stable-2.10
#          - stable-2.11
#          - stable-2.12
#          - devel
#        python:
#          - '2.6'
#          - '2.7'
#          - '3.5'
#          - '3.6'
#          - '3.7'
#          - '3.8'
#          - '3.9'
#          - '3.10'
#        exclude:
#          # Because ansible-test doesn't support Python 3.9 for Ansible 2.9
#          # and Python 3.10 is supported in 2.12 or later.
#          - ansible: stable-2.9
#            python: '3.9'
#          - ansible: stable-2.9
#            python: '3.10'
#          - ansible: stable-2.10
#            python: '3.10'
#          - ansible: stable-2.11
#            python: '3.10'
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#        with:
#          path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      - name: Install ansible-core (${{ matrix.ansible }})
#        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check
#      - name: Configure test environment
#        run: make configure-test-env
#      - name: Build collection for testing
#        run: make build-for-test
#      # Run the integration tests
#      - name: Run integration test
#        run: ansible-test integration -v --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --docker --coverage
#        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
#      # ansible-test support producing code coverage date
#      - name: Generate coverage report
#        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
#        working-directory: ./build/ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}
#      # See the reports at https://codecov.io/gh/yoanm/ansible-utils-collection
#      - uses: codecov/codecov-action@v2
#        with:
#          fail_ci_if_error: false
